#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2018 University of Groningen
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
High level API for Martinize2
"""

import argparse
from pathlib import Path

import vermouth
from vermouth.martinize2 import martinize2


VERSION = 'martinize with vermouth {}'.format(vermouth.__version__)


def _cys_argument(value):
    """
    Convert and validate the value of the cys option for argparse.

    Parameters
    ----------
    value: str
        The value given to the command line.

    Return
    ------
    str or float
        A value understood by the main function. This value can be either
        'auto' to detect cystein bridges automatically based on a default
        distance, 'none' to not have cystein bridges, or a float value to set
        cystein bridges based on a distance threshold.

    Raises
    ------
    argparse.ArgumentError
        Raised when the value cannot be converted.
    """
    try:
        result = float(value)
    except ValueError:
        lowered = value.lower()
        if lowered in ('auto', 'none'):
            return lowered
        raise argparse.ArgumentError(
            argument='-cys',
            message=('The value of the -cys option must be "auto", "none", '
                     'or a distance in nanometers.'),
            )
    else:
        return result


def maxwarn(value):
    """
    Given a maxwarn specification, split it in a warning type, and the number
    to ignore.

    >>> maxwarn('3')
    (None, 3)
    >>> maxwarn('general:15')
    ('general', 15)
    >>> maxwarn('inconsistent-data')
    ('inconsistent-data, None)

    Parameters
    ----------
    value: str
        A warning type and a count, separated by a colon.

    Returns
    -------
    tuple[str, int]
        A warning type and the associated count to ignore. Either element can be
        None if not specified.

    Raises
    ------
    argparse.ArgumentTypeError
    """
    msg = ("Values for the -maxwarn option must be the name of a "
           "warning type, a number, or following the format "
           "'<warning-type>:<count>' where <warning-type> is the name "
           "of the warning type to ignore, and <count> is the number of "
           "warning of that type to ignore. "
           "'{value}' is not a valid value.".format(value=value))
    splitted = value.split(':')
    if len(splitted) == 1:
        try:
            count = int(value)
        except ValueError:
            # The value is not an int, so a warning type to ignore an
            # an unspecified number of
            return (value, None)
        else:
            return (None, count)
    elif len(splitted) == 2:
        try:
            count = int(splitted[1])
        except ValueError:
            pass  # The exception will be raised at the end of the function
        else:
            return (splitted[0], count)
    raise argparse.ArgumentTypeError(msg)


def entry():
    """
    Parses commandline arguments and performs the logic.
    """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('-V', '--version', action='version', version=VERSION)

    file_group = parser.add_argument_group('Input and output files')
    file_group.add_argument('-f', dest='inpath', required=True, type=Path,
                            help='Input file (PDB|GRO)')
    file_group.add_argument('-x', dest='outpath', required=True, type=Path,
                            help='Output coarse grained structure (PDB)')
    file_group.add_argument('-o', dest='top_path', type=Path,
                            help='Output topology (TOP)')
    file_group.add_argument('-sep', dest='keep_duplicate_itp',
                            action='store_true', default=False,
                            help='Write separate topologies for identical chains')
    file_group.add_argument('-merge', dest='merge_chains',
                            type=lambda x: x.split(','), action='append',
                            help='Merge chains: e.g. -merge A,B,C (+)')
    file_group.add_argument('-ignore', dest='ignore_res', nargs='+',
                            default=[], action='append', type=lambda x: x.split(','),
                            help='Ignore residues with that name: e.g. '
                            '-ignore HOH,LIG (+)')
    file_group.add_argument('-ignh', dest='ignore_h', default=False,
                            action='store_true',
                            help='Ignore all Hydrogen atoms in the input file')
    file_group.add_argument('-model', dest='modelidx', default=None, type=int,
                            help='Which MODEL to select. Only meaningful for'
                            ' PDB files.')
    file_group.add_argument('-bonds-from', dest='bonds_from',
                            choices=['name', 'distance', 'none', 'both'],
                            default='both',
                            help="How to determine connectivity in the input. "
                            "If 'none', only bonds from the input file (CONECT)"
                            " will be used.")
    file_group.add_argument('-bonds-fudge', dest='bonds_fudge', type=float,
                            default=1.2, help='Factor with which Van der Waals'
                            ' radii should be scaled when determining bonds '
                            'based on distances.')

    ff_group = parser.add_argument_group('Force field selection')
    ff_group.add_argument('-ff', dest='to_ff', default='martini3001',
                          help='Which forcefield to use')
    ff_group.add_argument('-from', dest='from_ff', default='universal',
                          help='Force field of the original structure.')
    ff_group.add_argument('-ff-dir', dest='extra_ff_dir', action='append',
                          type=Path, default=[],
                          help='Additional repository for custom force fields.')
    ff_group.add_argument('-map-dir', dest='extra_map_dir', action='append',
                          type=Path, default=[],
                          help='Additional repository for mapping files.')
    ff_group.add_argument('-list-ff', action='store_true', dest='list_ff',
                          help='List all known force fields, and exit.')
    ff_group.add_argument('-list-blocks', action='store_true', dest='list_blocks',
                          help='List all Blocks and Modifications known to the'
                          ' force field, and exit.')

    posres_group = parser.add_argument_group('Position restraints')
    posres_group.add_argument('-p', dest='posres', type=str.lower,
                              choices=('none', 'all', 'backbone'), default='none',
                              help='Output position restraints (none/all/backbone)')
    posres_group.add_argument('-pf', dest='posres_fc', type=float, default=1000,
                              help='Position restraints force constant in kJ/mol/nm^2')
    secstruct_group = parser.add_argument_group('Secondary structure handling')
    secstruct_exclusion = secstruct_group.add_mutually_exclusive_group()
    secstruct_exclusion.add_argument('-dssp', dest='dssp_exe', nargs='?', const='dssp',
                                     help='DSSP executable for determining structure')
    secstruct_exclusion.add_argument('-ss', dest='ss', type=str.upper,
                                     metavar='SEQUENCE',
                                     help=('Manually set the secondary '
                                           'structure of the proteins.'))
    secstruct_exclusion.add_argument('-collagen', action='store_true', default=False,
                                     help='Use collagen parameters')
    secstruct_group.add_argument('-ed', dest='extdih', action='store_true', default=False,
                                 help=('Use dihedrals for extended regions '
                                       'rather than elastic bonds'))

    rb_group = parser.add_argument_group('Protein elastic network')
    rb_group.add_argument('-elastic', action='store_true', default=False,
                          help='Write elastic bonds')
    rb_group.add_argument('-ef', dest='rb_force_constant', type=float, default=500,
                          help='Elastic bond force constant Fc in kJ/mol/nm^2')
    rb_group.add_argument('-el', dest='rb_lower_bound', type=float, default=0,
                          help='Elastic bond lower cutoff: F = Fc if rij < lo')
    rb_group.add_argument('-eu', dest='rb_upper_bound', type=float, default=0.9,
                          help='Elastic bond upper cutoff: F = 0  if rij > up')
    rb_group.add_argument('-ermd', dest='res_min_dist', type=int,
                          help=('The minimum separation between two residues to have an RB '
                                'the default value is set by the force-field.'),
                          default=None)
    rb_group.add_argument('-ea', dest='rb_decay_factor', type=float, default=0,
                          help='Elastic bond decay factor a')
    rb_group.add_argument('-ep', dest='rb_decay_power', type=float, default=1,
                          help='Elastic bond decay power p')
    rb_group.add_argument('-em', dest='rb_minimum_force', type=float, default=0,
                          help='Remove elastic bonds with force constant lower than this')
    rb_group.add_argument('-eb', dest='rb_selection',
                          type=lambda x: x.split(','), default=None,
                          help='Comma separated list of bead names for elastic bonds')
    rb_group.add_argument('-eunit', dest='rb_unit', default='molecule',
                          choices=['chain', 'molecule', 'all'],
                          help=('Establish what is the structural unit for the '
                                'elastic network. Bonds are only created within'
                                ' a unit.'))

    go_group = parser.add_argument_group('Virtual site based GoMartini')
    go_group.add_argument('-govs-includes', action='store_true', default=False,
                          help='Write include statements to use Vitrual Site Go Martini.')
    go_group.add_argument('-govs-moltype', default='molecule_0',
                          help=('Set the name of the molecule when using '
                                'Virtual Sites GoMartini.'))

    prot_group = parser.add_argument_group('Protein description')
    prot_group.add_argument('-scfix', dest='scfix',
                            action='store_true', default=False,
                            help='Apply side chain corrections.')
    prot_group.add_argument('-cys', dest='cystein_bridge',
                            type=_cys_argument,
                            default='none', help='Cystein bonds')
    prot_group.add_argument('-mutate', dest='mutations', action='append',
                            type=lambda s: s.split(':'), default=[],
                            help='Mutate a residue. Desired mutation is '
                            'specified as, e.g. A-PHE45:ALA. The format is '
                            '<chain>-<resname><resid>:<new resname>. Elements '
                            'of the specification can be omitted as required.')
    prot_group.add_argument('-modify', dest='modifications', action='append',
                            type=lambda s: s.split(':'), default=[],
                            help='Add a modification to a residue. Desired '
                            'modification is specified as, e.g. A-ASP45:ASP0. '
                            'The format is <chain>-<resname><resid>:<modification>.'
                            ' Elements of the specification can be omitted as '
                            'required.')
    prot_group.add_argument('-nter', dest='modifications', action='append',
                            type=lambda s: ['nter', s], default=[],
                            help='Shorthand for patching N-termini. An '
                            'N-terminus is defined as a residue which is '
                            'connected to 1 other residue, and has the highest '
                            'resid.')
    prot_group.add_argument('-cter', dest='modifications', action='append',
                            type=lambda s: ['cter', s], default=[],
                            help='Shorthand for patching C-termini. A '
                            'C-terminus is defined as a residue which is '
                            'connected to 1 other residue, and has the lowest '
                            'resid.')
    # Unfortunately there's no action=extend_const. append_const *almost* does
    # what we need, but it makes the resulting list too deep:
    # [[['cter', 'COOH-ter'], ['nter', 'NH2-ter']], ['ASP3', 'ASP0']]
    prot_group.add_argument('-nt', dest='neutral_termini',
                            action='store_true', default=False,
                            help='Set neutral termini (charged is default). '
                            'Alias for "-nter NH2-ter -cter COOH-ter"')

    debug_group = parser.add_argument_group('Debugging options')
    debug_group.add_argument('-write-graph', type=Path, default=None,
                             help='Write the graph as PDB after the MakeBonds step.')
    debug_group.add_argument('-write-repair', type=Path, default=None,
                             help=('Write the graph as PDB after the '
                                   'RepairGraph step. The resulting file may '
                                   'contain "nan" coordinates making it '
                                   'unreadable by most softwares.'))
    debug_group.add_argument('-write-canon', type=Path, default=None,
                             help=('Write the graph as PDB after the '
                                   'CanonicalizeModifications step. The '
                                   'resulting file may contain "nan" '
                                   'coordinates making it unreadable by most '
                                   'software.'))
    debug_group.add_argument('-v', dest='verbosity', action='count',
                             help='Enable debug logging output. Can be given '
                                  'multiple times.', default=0)
    debug_group.add_argument('-maxwarn', dest='maxwarn', type=maxwarn,
                             action='append', nargs='+', default=[],
                             help='The maximum number of allowed warnings. If '
                             'more warnings are encountered no output files are'
                             ' written.')

    args = parser.parse_args()
    martinize2(**vars(args))


if __name__ == '__main__':
    entry()
